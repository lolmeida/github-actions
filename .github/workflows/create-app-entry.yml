name: Register Application

on:
  workflow_call:
    inputs:
      app_name:
        description: 'Application name'
        required: true
        type: string
      app_ingress:
        description: 'Application URL'
        required: true
        type: string
      app_description:
        description: 'Application description'
        required: true
        type: string
      app_icon:
        description: 'App icon URL (optional)'
        required: false
        type: string
        default: ''
      is_active:
        description: 'Is application active?'
        required: false
        type: boolean
        default: true
      is_enabled:
        description: 'Is application enabled?'
        required: false
        type: boolean
        default: true
    secrets:
      API_USERNAME:
        required: true
      API_PASSWORD:
        required: true

jobs:
  register-app:
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate
        id: auth
        shell: bash
        env:
          AUTH_URL: https://auth.lolmeida.com/auth/login
          USERNAME: ${{ secrets.API_USERNAME }}
          PASSWORD: ${{ secrets.API_PASSWORD }}
        run: |
          echo "üîê Authenticating against $AUTH_URL"

          # Verificar se as credenciais n√£o est√£o vazias
          if [[ -z "$USERNAME" ]]; then
            echo "‚ùå USERNAME secret is empty!"
            exit 1
          fi
          
          if [[ -z "$PASSWORD" ]]; then
            echo "‚ùå PASSWORD secret is empty!"
            exit 1
          fi

          echo "Username: ${USERNAME:0:3}...${USERNAME: -3} (${#USERNAME} chars)"
          echo "Password: [${#PASSWORD} chars]"

          AUTH_PAYLOAD=$(jq -n \
            --arg username "$USERNAME" \
            --arg password "$PASSWORD" \
            '{username: $username, password: $password}')

          echo "Making authentication request..."
          
          TOKEN_RESPONSE=$(curl -s -X POST "$AUTH_URL" \
            -H 'Content-Type: application/json' \
            -d "$AUTH_PAYLOAD" \
            --max-time 30 \
            -w "HTTP_STATUS:%{http_code}")

          # Separar status da resposta
          HTTP_STATUS=$(echo "$TOKEN_RESPONSE" | grep -o 'HTTP_STATUS:[0-9]*' | tail -1 | cut -d: -f2)
          RESPONSE_BODY=$(echo "$TOKEN_RESPONSE" | sed 's/HTTP_STATUS:[0-9]*$//')

          echo "Authentication HTTP Status: $HTTP_STATUS"

          if [[ "$HTTP_STATUS" != "200" ]]; then
            echo "‚ùå Authentication failed (HTTP $HTTP_STATUS)"
            echo "Response: $RESPONSE_BODY"
          
            case "$HTTP_STATUS" in
              401) echo "üîç Invalid credentials" ;;
              403) echo "üîç User may not have required permissions" ;;
              429) echo "üîç Rate limiting" ;;
              *) echo "üîç Unexpected authentication error" ;;
            esac
            exit 1
          fi

          # Verificar se a resposta √© JSON v√°lido
          if ! echo "$RESPONSE_BODY" | jq . >/dev/null 2>&1; then
            echo "‚ùå Response is not valid JSON"
            echo "Raw response: $RESPONSE_BODY"
            exit 1
          fi

          TOKEN=$(echo "$RESPONSE_BODY" | jq -r '.token')
          
          if [[ -z "$TOKEN" || "$TOKEN" == "null" ]]; then
            echo "‚ùå No token found in response"
            echo "Response: $RESPONSE_BODY"
            exit 1
          fi

          echo "‚úÖ Authentication successful"
          echo "Token extracted (length: ${#TOKEN})"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Validate Token
        shell: bash
        env:
          TOKEN: ${{ steps.auth.outputs.token }}
        run: |
          # Verificar se o token existe
          if [[ -z "$TOKEN" ]]; then
            echo "‚ùå Token is empty!"
            exit 1
          fi
          
          echo "‚úÖ Token validation passed"
          echo "Token length: ${#TOKEN}"
          
          # Verificar se o token tem formato JWT (se aplic√°vel)
          if [[ "$TOKEN" =~ ^[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+$ ]]; then
            echo "‚úÖ Token appears to be a valid JWT format"
          else
            echo "‚ÑπÔ∏è Token is not in JWT format (may be normal depending on your API)"
          fi

      - name: Test API Access
        shell: bash
        env:
          TOKEN: ${{ steps.auth.outputs.token }}
        run: |
          echo "üîç Testing API endpoint access..."
          echo "Using endpoint: https://k8s-be.lolmeida.com/deployed-apps"
          
          echo "Token length: ${#TOKEN} characters"
          
          # Primeiro, verificar as permiss√µes do usu√°rio
          echo "üîç Checking user permissions..."
          USER_INFO_RESPONSE=$(curl -s -X GET "https://auth.lolmeida.com/auth/me" \
            -H "Authorization: Bearer $TOKEN" \
            -w "HTTP_STATUS:%{http_code}" \
            --max-time 30)
          
          USER_HTTP_STATUS=$(echo "$USER_INFO_RESPONSE" | grep -o 'HTTP_STATUS:[0-9]*' | tail -1 | cut -d: -f2)
          USER_RESPONSE_BODY=$(echo "$USER_INFO_RESPONSE" | sed 's/HTTP_STATUS:[0-9]*$//')
          
          echo "User info HTTP Status: $USER_HTTP_STATUS"
          echo "User info: $USER_RESPONSE_BODY"
          
          if [[ "$USER_HTTP_STATUS" == "200" ]]; then
            # Verificar se a resposta cont√©m ADMIN diretamente na string
            if echo "$USER_RESPONSE_BODY" | grep -q '"ADMIN"'; then
              echo "‚úÖ User has ADMIN permissions"
            else
              echo "‚ùå User does not have ADMIN permissions"
              echo "Response: $USER_RESPONSE_BODY"
              exit 1
            fi
          else
            echo "‚ùå Could not verify user permissions"
            exit 1
          fi
          
          # Agora testar a API de deployment com diferentes configura√ß√µes
          echo ""
          echo "üîç Testing deployment API access with different headers..."
          
          # Teste 1: Headers b√°sicos
          echo "Test 1: Basic headers"
          TEST_RESPONSE=$(curl -s -X GET "https://k8s-be.lolmeida.com/deployed-apps" \
            -H "Authorization: Bearer $TOKEN" \
            -w "HTTP_STATUS:%{http_code}" \
            --max-time 30)
          
          HTTP_STATUS=$(echo "$TEST_RESPONSE" | grep -o 'HTTP_STATUS:[0-9]*' | tail -1 | cut -d: -f2)
          echo "  Result: HTTP $HTTP_STATUS"
          
          # Teste 2: Com Content-Type e Accept
          echo "Test 2: With Content-Type and Accept headers"
          TEST_RESPONSE2=$(curl -s -X GET "https://k8s-be.lolmeida.com/deployed-apps" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -w "HTTP_STATUS:%{http_code}" \
            --max-time 30)
          
          HTTP_STATUS2=$(echo "$TEST_RESPONSE2" | grep -o 'HTTP_STATUS:[0-9]*' | tail -1 | cut -d: -f2)
          echo "  Result: HTTP $HTTP_STATUS2"
          
          # Teste 3: Com User-Agent
          echo "Test 3: With User-Agent"
          TEST_RESPONSE3=$(curl -s -X GET "https://k8s-be.lolmeida.com/deployed-apps" \
            -H "Authorization: Bearer $TOKEN" \
            -H "User-Agent: GitHub-Actions" \
            -w "HTTP_STATUS:%{http_code}" \
            --max-time 30)
          
          HTTP_STATUS3=$(echo "$TEST_RESPONSE3" | grep -o 'HTTP_STATUS:[0-9]*' | tail -1 | cut -d: -f2)
          echo "  Result: HTTP $HTTP_STATUS3"
          
          # An√°lise dos resultados
          echo ""
          echo "üìä Test Results Summary:"
          echo "  Basic headers: $HTTP_STATUS"
          echo "  With JSON headers: $HTTP_STATUS2"
          echo "  With User-Agent: $HTTP_STATUS3"
          
          # Se todos retornaram 401, √© problema t√©cnico
          if [[ "$HTTP_STATUS" == "401" && "$HTTP_STATUS2" == "401" && "$HTTP_STATUS3" == "401" ]]; then
            echo ""
            echo "‚ùå All tests failed with 401 - Technical issue confirmed"
            echo ""
            echo "üîç DIAGNOSIS:"
            echo "  ‚úÖ User authenticated successfully"
            echo "  ‚úÖ User has ADMIN permissions"
            echo "  ‚úÖ Token format is valid JWT"
            echo "  ‚ùå Deployment API consistently rejects token"
            echo ""
            echo "üö® ROOT CAUSE:"
            echo "  JWT validation mismatch between auth and deployment APIs"
            echo ""
            echo "üîß ACTION REQUIRED:"
            echo "  Check deployment API configuration:"
            echo "  1. JWT issuer validation"
            echo "  2. JWT signing key"
            echo "  3. Required claims"
            echo "  4. Token validation logic"
            echo ""
            echo "üí° Quick check: Compare JWT configuration between:"
            echo "  - https://auth.lolmeida.com (working)"
            echo "  - https://k8s-be.lolmeida.com (failing)"
            exit 1
          elif [[ "$HTTP_STATUS" == "200" || "$HTTP_STATUS2" == "200" || "$HTTP_STATUS3" == "200" ]]; then
            echo ""
            echo "‚úÖ At least one test succeeded - API access working"
          
            # Use the successful configuration for the rest of the workflow
            if [[ "$HTTP_STATUS2" == "200" ]]; then
              echo "Using JSON headers for subsequent requests"
            elif [[ "$HTTP_STATUS3" == "200" ]]; then
              echo "Using User-Agent header for subsequent requests"
            else
              echo "Using basic headers for subsequent requests"
            fi
          else
            echo ""
            echo "‚ùå Unexpected response pattern"
            echo "Responses: $HTTP_STATUS, $HTTP_STATUS2, $HTTP_STATUS3"
            RESPONSE_BODY=$(echo "$TEST_RESPONSE" | sed 's/HTTP_STATUS:[0-9]*$//')
            echo "Response body: $RESPONSE_BODY"
            exit 1
          fi

      - name: Register Application
        id: register
        shell: bash
        env:
          APP_NAME: ${{ inputs.app_name }}
          APP_URL: ${{ inputs.app_ingress }}
          APP_DESCRIPTION: ${{ inputs.app_description }}
          APP_ICON: ${{ inputs.app_icon }}
          IS_ACTIVE: ${{ inputs.is_active }}
          IS_ENABLED: ${{ inputs.is_enabled }}
          TOKEN: ${{ steps.auth.outputs.token }}
        run: |
          echo "üì¶ Registering application:"
          echo "Name: $APP_NAME"
          echo "URL: $APP_URL"
          echo "Description: $APP_DESCRIPTION"

          # Default icon if empty
          if [[ -z "$APP_ICON" ]]; then
            APP_NAME_ENCODED=$(echo "$APP_NAME" | sed 's/ /%20/g')
            APP_ICON="https://placehold.co/600x400/white/gray?text=${APP_NAME_ENCODED}"
          fi

          # Criar payload JSON
          REGISTER_PAYLOAD=$(jq -n \
            --arg name "$APP_NAME" \
            --arg url "$APP_URL" \
            --arg description "$APP_DESCRIPTION" \
            --arg icon "$APP_ICON" \
            --argjson isActive $IS_ACTIVE \
            --argjson isEnabled $IS_ENABLED \
            '{name: $name, url: $url, description: $description, icon: $icon, isActive: $isActive, isEnabled: $isEnabled}')
          
          echo "Payload prepared for registration"

          # Registrar aplica√ß√£o com headers otimizados
          echo "Attempting to register application..."
          REGISTER_RESPONSE=$(curl -s -X POST "https://k8s-be.lolmeida.com/deployed-apps" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -H "User-Agent: GitHub-Actions" \
            -d "$REGISTER_PAYLOAD" \
            --max-time 30 \
            -w "HTTP_STATUS:%{http_code}")

          # Processar resposta
          HTTP_STATUS=$(echo "$REGISTER_RESPONSE" | grep -o 'HTTP_STATUS:[0-9]*' | cut -d: -f2)
          RESPONSE_BODY=$(echo "$REGISTER_RESPONSE" | sed 's/HTTP_STATUS:[0-9]*$//')
          
          echo "Registration HTTP Status: $HTTP_STATUS"
          echo "Response: $RESPONSE_BODY"

          case "$HTTP_STATUS" in
            200|201)
              APP_ID=$(echo "$RESPONSE_BODY" | jq -r '.id // .app_id // "unknown"')
              echo "‚úÖ App registered successfully!"
              echo "App ID: $APP_ID"
              echo "status=success" >> $GITHUB_OUTPUT
              echo "app_id=$APP_ID" >> $GITHUB_OUTPUT
              ;;
            409)
              echo "‚ÑπÔ∏è App already exists"
              echo "status=already-exists" >> $GITHUB_OUTPUT
              echo "app_id=existing" >> $GITHUB_OUTPUT
              ;;
            401)
              echo "‚ùå Registration failed - Unauthorized (HTTP 401)"
              echo ""
              echo "üîç TECHNICAL ISSUE DETECTED:"
              echo "  ‚úÖ User has ADMIN permissions"
              echo "  ‚úÖ Token valid for authentication API"
              echo "  ‚ùå Deployment API rejects valid admin token"
              echo ""
              echo "üö® LIKELY CAUSES:"
              echo "  1. JWT signature validation mismatch between APIs"
              echo "  2. Different JWT signing keys or algorithms"
              echo "  3. Deployment API misconfiguration"
              echo "  4. Token expiration/timing issues"
              echo "  5. Missing required JWT claims in deployment API"
              echo ""
              echo "üîß IMMEDIATE ACTIONS:"
              echo "  1. Check deployment API logs for specific JWT errors"
              echo "  2. Verify JWT signing configuration matches between:"
              echo "     - auth.lolmeida.com (issuer)"
              echo "     - k8s-be.lolmeida.com (consumer)"
              echo "  3. Compare JWT validation settings"
              echo "  4. Check if deployment API requires additional claims"
              echo ""
              echo "üîç DEBUG INFORMATION:"
              echo "  - Auth API: https://auth.lolmeida.com ‚úÖ (working)"
              echo "  - Deploy API: https://k8s-be.lolmeida.com ‚ùå (rejecting)"
              echo "  - User: test (ADMIN permissions)"
              echo "  - Token length: ${#TOKEN} chars"
              echo ""
              echo "üí° MANUAL DEBUGGING COMMANDS:"
              echo "  # Check JWT payload:"
              echo "  TOKEN=\$(curl -s -X POST 'https://auth.lolmeida.com/auth/login' -H 'Content-Type: application/json' -d '{\"username\":\"test\",\"password\":\"test1234\"}' | jq -r '.token')"
              echo "  echo \"\$TOKEN\" | cut -d. -f2 | base64 -d | jq ."
              echo ""
              echo "  # Test deployment API directly:"
              echo "  curl -X GET 'https://k8s-be.lolmeida.com/deployed-apps' -H \"Authorization: Bearer \$TOKEN\" -v"
              echo ""
              echo "status=failed" >> $GITHUB_OUTPUT
              exit 1
              ;;
            403)
              echo "‚ùå Registration failed - Forbidden (HTTP 403)"
              echo "User is authenticated but lacks deployment permissions"
              echo "Same solution as 401 - create admin user or grant permissions"
              echo "status=failed" >> $GITHUB_OUTPUT
              exit 1
              ;;
            *)
              echo "‚ùå Registration failed with HTTP $HTTP_STATUS"
              echo "Response: $RESPONSE_BODY"
              echo "status=failed" >> $GITHUB_OUTPUT
              exit 1
              ;;
          esac