name: Register Application

on:
  workflow_call:
    inputs:
      app_name:
        description: 'Application name'
        required: true
        type: string
      app_ingress:
        description: 'Application URL'
        required: true
        type: string
      app_description:
        description: 'Application description'
        required: true
        type: string
      app_icon:
        description: 'App icon URL (optional)'
        required: false
        type: string
        default: ''
      is_active:
        description: 'Is application active?'
        required: false
        type: boolean
        default: true
      is_enabled:
        description: 'Is application enabled?'
        required: false
        type: boolean
        default: true
    secrets:
      API_USERNAME:
        required: true
      API_PASSWORD:
        required: true

jobs:
  register-app:
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate
        id: auth
        shell: bash
        env:
          AUTH_URL: https://auth.lolmeida.com/auth/login
          USERNAME: ${{ secrets.API_USERNAME }}
          PASSWORD: ${{ secrets.API_PASSWORD }}
        run: |
          echo "üîê Authenticating against $AUTH_URL"

          AUTH_PAYLOAD=$(jq -n \
            --arg username "$USERNAME" \
            --arg password "$PASSWORD" \
            '{username: $username, password: $password}')

          echo "Authentication payload prepared (credentials hidden)"

          TOKEN_RESPONSE=$(curl -s -X POST "$AUTH_URL" \
            -H 'Content-Type: application/json' \
            -d "$AUTH_PAYLOAD" \
            --max-time 30 \
            -w "HTTP_STATUS:%{http_code}" \
            -v 2>&1)

          echo "Full authentication response:"
          echo "$TOKEN_RESPONSE"

          HTTP_STATUS=$(echo "$TOKEN_RESPONSE" | grep -o 'HTTP_STATUS:[0-9]*' | tail -1 | cut -d: -f2)
          RESPONSE_BODY=$(echo "$TOKEN_RESPONSE" | sed 's/HTTP_STATUS:[0-9]*$//')

          echo "Authentication HTTP Status: $HTTP_STATUS"
          echo "Response body: $RESPONSE_BODY"

          if [[ "$HTTP_STATUS" != "200" ]]; then
            echo "‚ùå Authentication failed (HTTP $HTTP_STATUS)"
            echo "Response: $RESPONSE_BODY"
            exit 1
          fi

          TOKEN=$(echo "$RESPONSE_BODY" | jq -r '.token')
          if [[ -z "$TOKEN" || "$TOKEN" == "null" ]]; then
            echo "‚ùå No token found in response"
            echo "Full response: $RESPONSE_BODY"
            echo "Available fields in response:"
            echo "$RESPONSE_BODY" | jq -r 'keys[]?' 2>/dev/null || echo "Response is not valid JSON"
            exit 1
          fi

          echo "‚úÖ Authentication successful"
          echo "Token extracted from response"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Validate Token
        shell: bash
        env:
          TOKEN: ${{ steps.auth.outputs.token }}
        run: |
          # Verificar se o token existe e n√£o foi mascarado
          if [[ -z "$TOKEN" ]]; then
            echo "‚ùå Token is empty!"
            exit 1
          fi
          
          if [[ "$TOKEN" == "***" ]]; then
            echo "‚ùå Token was masked and corrupted!"
            exit 1
          fi
          
          echo "‚úÖ Token validation passed"
          echo "Token length: ${#TOKEN}"
          
          # Debug seguro do token - mostrar caracteres de forma indireta
          echo "Token first 20 chars (base64): $(echo -n "${TOKEN:0:20}" | base64)"
          echo "Token last 10 chars (base64): $(echo -n "${TOKEN: -10}" | base64)"
          echo "Token middle chars 30-40 (base64): $(echo -n "${TOKEN:30:10}" | base64)"
          
          # Verificar se o token tem formato JWT (se aplic√°vel)
          if [[ "$TOKEN" =~ ^[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+$ ]]; then
            echo "‚úÖ Token appears to be a valid JWT format"
          else
            echo "‚ÑπÔ∏è Token is not in JWT format (may be normal depending on your API)"
          fi
          
          # Mostrar caracteres espec√≠ficos para debug
          echo "Char at position 10: $(echo -n "${TOKEN:10:1}" | od -c)"
          echo "Char at position 50: $(echo -n "${TOKEN:50:1}" | od -c)"

      - name: Debug Token (TEMPORARY - REMOVE AFTER FIXING)
        shell: bash
        env:
          TOKEN: ${{ steps.auth.outputs.token }}
        run: |
          echo "üîç Full token debug (REMOVE THIS STEP AFTER FIXING):"
          
          # M√©todo 1: Mostrar token usando printf para evitar mascaramento
          printf "Full token: %s\n" "$TOKEN"
          
          # M√©todo 2: Mostrar token character por character
          echo "Token char by char:"
          for (( i=0; i<${#TOKEN}; i++ )); do
            printf "%c" "${TOKEN:$i:1}"
          done
          printf "\n"
          
          # M√©todo 3: Mostrar token em hexadecimal
          echo "Token in hex:"
          echo -n "$TOKEN" | hexdump -C
          
          # M√©todo 4: Usar diferentes encoding
          echo "Token base64 encoded:"
          echo -n "$TOKEN" | base64
          
          echo "‚ö†Ô∏è REMEMBER TO REMOVE THIS DEBUG STEP AFTER FIXING THE ISSUE!"

      - name: Test API Access
        shell: bash
        env:
          TOKEN: ${{ steps.auth.outputs.token }}
        run: |
          echo "üîç Testing API endpoint access..."
          echo "Using endpoint: https://k8s-be.lolmeida.com/deployed-apps"
          
          # Mostrar o header Authorization que ser√° enviado (sem mascaramento)
          AUTH_HEADER="Bearer $TOKEN"
          echo "Authorization header length: ${#AUTH_HEADER}"
          echo "Authorization header starts with: $(echo -n "$AUTH_HEADER" | cut -c1-20)..."
          
          TEST_RESPONSE=$(curl -s -X GET "https://k8s-be.lolmeida.com/deployed-apps" \
            -H "Authorization: Bearer $TOKEN" \
            -w "HTTP_STATUS:%{http_code}" \
            --max-time 30 \
            -v 2>&1)
          
          echo "Full curl response:"
          echo "$TEST_RESPONSE"
          
          HTTP_STATUS=$(echo "$TEST_RESPONSE" | grep -o 'HTTP_STATUS:[0-9]*' | tail -1 | cut -d: -f2)
          RESPONSE_BODY=$(echo "$TEST_RESPONSE" | sed 's/HTTP_STATUS:[0-9]*$//')
          
          echo "Test endpoint HTTP Status: $HTTP_STATUS"
          
          if [[ "$HTTP_STATUS" == "401" ]]; then
            echo "‚ùå API access failed - Unauthorized"
            echo "This means the token is either:"
            echo "  1. Invalid or malformed"
            echo "  2. Expired"
            echo "  3. Missing required permissions"
            echo "  4. Not being sent correctly"
            echo "Full response body: $RESPONSE_BODY"
            exit 1
          elif [[ "$HTTP_STATUS" == "200" ]]; then
            echo "‚úÖ API access successful"
          else
            echo "‚ÑπÔ∏è API access returned HTTP $HTTP_STATUS (analyzing...)"
            case "$HTTP_STATUS" in
              403) echo "‚ùå Forbidden - Token valid but lacks permissions" ;;
              404) echo "‚ùå Not Found - Check endpoint URL" ;;
              500) echo "‚ùå Server Error - API issue" ;;
              *) echo "‚ÑπÔ∏è Unexpected status code" ;;
            esac
          fi

      - name: Register Application
        id: register
        shell: bash
        env:
          APP_NAME: ${{ inputs.app_name }}
          APP_URL: ${{ inputs.app_ingress }}
          APP_DESCRIPTION: ${{ inputs.app_description }}
          APP_ICON: ${{ inputs.app_icon }}
          IS_ACTIVE: ${{ inputs.is_active }}
          IS_ENABLED: ${{ inputs.is_enabled }}
          TOKEN: ${{ steps.auth.outputs.token }}
        run: |
          echo "üì¶ Registering application:"
          echo "Name: $APP_NAME"
          echo "URL: $APP_URL"
          echo "Description: $APP_DESCRIPTION"

          # Verifica√ß√£o final do token antes do uso
          if [[ -z "$TOKEN" || "$TOKEN" == "***" ]]; then
            echo "‚ùå Token is empty or was masked!"
            exit 1
          fi

          # Default icon if empty
          if [[ -z "$APP_ICON" ]]; then
            APP_NAME_ENCODED=$(echo "$APP_NAME" | sed 's/ /%20/g')
            APP_ICON="https://placehold.co/600x400/white/gray?text=${APP_NAME_ENCODED}"
          fi

          # Criar payload JSON
          REGISTER_PAYLOAD=$(jq -n \
            --arg name "$APP_NAME" \
            --arg url "$APP_URL" \
            --arg description "$APP_DESCRIPTION" \
            --arg icon "$APP_ICON" \
            --argjson isActive $IS_ACTIVE \
            --argjson isEnabled $IS_ENABLED \
            '{name: $name, url: $url, description: $description, icon: $icon, isActive: $isActive, isEnabled: $isEnabled}')
          
          echo "Payload prepared successfully"

          # Registrar aplica√ß√£o
          REGISTER_RESPONSE=$(curl -s -X POST "https://k8s-be.lolmeida.com/deployed-apps" \
            -H "Authorization: Bearer $TOKEN" \
            -H 'Content-Type: application/json' \
            -d "$REGISTER_PAYLOAD" \
            --max-time 30 \
            -w "HTTP_STATUS:%{http_code}")

          # Processar resposta
          HTTP_STATUS=$(echo "$REGISTER_RESPONSE" | grep -o 'HTTP_STATUS:[0-9]*' | cut -d: -f2)
          RESPONSE_BODY=$(echo "$REGISTER_RESPONSE" | sed 's/HTTP_STATUS:[0-9]*$//')
          
          echo "Registration HTTP Status: $HTTP_STATUS"

          case "$HTTP_STATUS" in
            200|201)
              APP_ID=$(echo "$RESPONSE_BODY" | jq -r '.id // .app_id // "unknown"')
              echo "‚úÖ App registered successfully!"
              echo "App ID: $APP_ID"
              echo "status=success" >> $GITHUB_OUTPUT
              echo "app_id=$APP_ID" >> $GITHUB_OUTPUT
              ;;
            409)
              echo "‚ÑπÔ∏è App already exists"
              echo "status=already-exists" >> $GITHUB_OUTPUT
              echo "app_id=existing" >> $GITHUB_OUTPUT
              ;;
            401)
              echo "‚ùå Registration failed - Unauthorized (HTTP 401)"
              echo "This suggests the token is invalid, expired, or lacks permissions"
              echo "Response: $RESPONSE_BODY"
              echo "status=failed" >> $GITHUB_OUTPUT
              exit 1
              ;;
            *)
              echo "‚ùå Registration failed with HTTP $HTTP_STATUS"
              echo "Response: $RESPONSE_BODY"
              echo "status=failed" >> $GITHUB_OUTPUT
              exit 1
              ;;
          esac