name: Register Application

on:
  workflow_call:
    inputs:
      app_name:
        description: 'Application name'
        required: true
        type: string
      app_ingress:
        description: 'Application URL'
        required: true
        type: string
      app_description:
        description: 'Application description'
        required: true
        type: string
      app_icon:
        description: 'App icon URL (optional)'
        required: false
        type: string
        default: ''
      is_active:
        description: 'Is application active?'
        required: false
        type: boolean
        default: true
      is_enabled:
        description: 'Is application enabled?'
        required: false
        type: boolean
        default: true
    secrets:
      API_USERNAME:
        required: true
      API_PASSWORD:
        required: true

jobs:
  register-app:
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate
        id: auth
        shell: bash
        env:
          AUTH_URL: https://auth.lolmeida.com/auth/login
          USERNAME: ${{ secrets.API_USERNAME }}
          PASSWORD: ${{ secrets.API_PASSWORD }}
        run: |
          echo "üîê Authenticating against $AUTH_URL"

          # Debug das credenciais (sem expor valores reais)
          echo "Username length: ${#USERNAME}"
          echo "Password length: ${#PASSWORD}"
          echo "Username starts with: ${USERNAME:0:3}..."
          echo "Username ends with: ...${USERNAME: -3}"

          # Verificar se as credenciais n√£o est√£o vazias
          if [[ -z "$USERNAME" ]]; then
            echo "‚ùå USERNAME secret is empty!"
            exit 1
          fi
          
          if [[ -z "$PASSWORD" ]]; then
            echo "‚ùå PASSWORD secret is empty!"
            exit 1
          fi

          AUTH_PAYLOAD=$(jq -n \
            --arg username "$USERNAME" \
            --arg password "$PASSWORD" \
            '{username: $username, password: $password}')

          echo "Authentication payload structure:"
          echo "$AUTH_PAYLOAD" | jq 'keys'

          echo "Making authentication request..."
          
          TOKEN_RESPONSE=$(curl -s -X POST "$AUTH_URL" \
            -H 'Content-Type: application/json' \
            -d "$AUTH_PAYLOAD" \
            --max-time 30 \
            -w "HTTP_STATUS:%{http_code}")

          # Separar status da resposta
          HTTP_STATUS=$(echo "$TOKEN_RESPONSE" | grep -o 'HTTP_STATUS:[0-9]*' | tail -1 | cut -d: -f2)
          RESPONSE_BODY=$(echo "$TOKEN_RESPONSE" | sed 's/HTTP_STATUS:[0-9]*$//')

          echo "Authentication HTTP Status: $HTTP_STATUS"
          echo "Raw response body: $RESPONSE_BODY"

          if [[ "$HTTP_STATUS" != "200" ]]; then
            echo "‚ùå Authentication failed (HTTP $HTTP_STATUS)"
            echo "Response: $RESPONSE_BODY"
          
            # Verificar tipos espec√≠ficos de erro
            case "$HTTP_STATUS" in
              401) echo "üîç Diagnosis: Invalid username/password" ;;
              403) echo "üîç Diagnosis: User may not have required permissions" ;;
              429) echo "üîç Diagnosis: Rate limiting" ;;
              *) echo "üîç Diagnosis: Unexpected authentication error" ;;
            esac
            exit 1
          fi

          # Verificar se a resposta √© JSON v√°lido
          if ! echo "$RESPONSE_BODY" | jq . >/dev/null 2>&1; then
            echo "‚ùå Response is not valid JSON"
            echo "Raw response: $RESPONSE_BODY"
            exit 1
          fi

          # Mostrar estrutura da resposta
          echo "Response structure:"
          echo "$RESPONSE_BODY" | jq .

          TOKEN=$(echo "$RESPONSE_BODY" | jq -r '.token')
          
          echo "Extracted token: $TOKEN"
          
          # An√°lise detalhada do token
          if [[ "$TOKEN" == "***" ]]; then
            echo "‚ùå CRITICAL: API is returning masked token for this user"
            echo "üîç This suggests:"
            echo "  1. The user ($USERNAME) has limited permissions"
            echo "  2. The API masks tokens for non-admin users"
            echo "  3. This user account may not be suitable for CI/CD"
            echo ""
            echo "üí° Try using an admin/service account with full API access"
            exit 1
          elif [[ "$TOKEN" =~ ^eyJ ]]; then
            echo "‚úÖ Valid JWT token received!"
            echo "Token starts with JWT header: ${TOKEN:0:20}..."
          elif [[ -z "$TOKEN" || "$TOKEN" == "null" ]]; then
            echo "‚ùå No token found in response"
            exit 1
          else
            echo "‚úÖ Token received (non-JWT format)"
            echo "Token length: ${#TOKEN}"
          fi

          echo "‚úÖ Authentication successful"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Validate Token
        shell: bash
        env:
          TOKEN: ${{ steps.auth.outputs.token }}
        run: |
          # Verificar se o token existe
          if [[ -z "$TOKEN" ]]; then
            echo "‚ùå Token is empty!"
            exit 1
          fi
          
          # Verificar se foi mascarado pela API
          if [[ "$TOKEN" == "***" ]]; then
            echo "‚ùå Token was masked by your API!"
            echo "Your authentication API is returning '***' instead of the actual token"
            echo "This is a server-side configuration issue, not a GitHub Actions problem"
            exit 1
          fi
          
          echo "‚úÖ Token validation passed"
          echo "Token length: ${#TOKEN}"
          
          # Verificar se o token tem formato JWT (se aplic√°vel)
          if [[ "$TOKEN" =~ ^[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+$ ]]; then
            echo "‚úÖ Token appears to be a valid JWT format"
          else
            echo "‚ÑπÔ∏è Token is not in JWT format (may be normal depending on your API)"
          fi

      - name: Debug Token (TEMPORARY - REMOVE AFTER FIXING)
        shell: bash
        env:
          TOKEN: ${{ steps.auth.outputs.token }}
        run: |
          echo "üîç Token debug analysis:"
          
          if [[ "$TOKEN" == "***" ]]; then
            echo "‚ùå CONFIRMED: Token is masked ('***')"
            echo "This is being returned by your API, not masked by GitHub"
            echo "Your authentication API is configured to mask tokens in responses"
            echo ""
            echo "Solutions to try:"
            echo "1. Check your API server logs for the actual token value"
            echo "2. Look for a debug/development mode in your API configuration"
            echo "3. Check if the API supports a 'show-token' parameter or header"
            echo "4. Contact your API administrator to configure token visibility"
            echo ""
            echo "CRITICAL: Your workflow will fail until the API returns the actual token"
            exit 1
          else
            echo "‚úÖ Token is not masked, proceeding with analysis..."
            echo "Token length: ${#TOKEN}"
            echo "Token first 10 chars: ${TOKEN:0:10}..."
            echo "Token format appears valid"
          fi

      - name: Test API Access
        shell: bash
        env:
          TOKEN: ${{ steps.auth.outputs.token }}
        run: |
          echo "üîç Testing API endpoint access..."
          echo "Using endpoint: https://k8s-be.lolmeida.com/deployed-apps"
          
          # Verificar se o token √© v√°lido antes de tentar usar
          if [[ "$TOKEN" == "***" ]]; then
            echo "‚ùå Cannot test API access: token is masked ('***')"
            echo "Fix the authentication issue first"
            exit 1
          fi
          
          echo "Token validation passed, testing API access..."
          
          TEST_RESPONSE=$(curl -s -X GET "https://k8s-be.lolmeida.com/deployed-apps" \
            -H "Authorization: Bearer $TOKEN" \
            -w "HTTP_STATUS:%{http_code}" \
            --max-time 30)
          
          HTTP_STATUS=$(echo "$TEST_RESPONSE" | grep -o 'HTTP_STATUS:[0-9]*' | tail -1 | cut -d: -f2)
          RESPONSE_BODY=$(echo "$TEST_RESPONSE" | sed 's/HTTP_STATUS:[0-9]*$//')
          
          echo "Test endpoint HTTP Status: $HTTP_STATUS"
          echo "Response body: $RESPONSE_BODY"
          
          case "$HTTP_STATUS" in
            200)
              echo "‚úÖ API access successful" ;;
            401)
              echo "‚ùå API access failed - Unauthorized"
              echo "The token was accepted by auth API but rejected by deployment API"
              echo "Possible issues:"
              echo "  1. Token doesn't have required permissions for deployment API"
              echo "  2. Different API expects different token format"
              echo "  3. Token scope is limited to auth operations only"
              exit 1 ;;
            403)
              echo "‚ùå Forbidden - Token valid but lacks permissions" 
              exit 1 ;;
            404)
              echo "‚ùå Not Found - Check endpoint URL" 
              exit 1 ;;
            500)
              echo "‚ùå Server Error - API issue" 
              exit 1 ;;
            *)
              echo "‚ÑπÔ∏è Unexpected status code: $HTTP_STATUS"
              echo "This might be normal for a GET request to this endpoint" ;;
          esac

      - name: Register Application
        id: register
        shell: bash
        env:
          APP_NAME: ${{ inputs.app_name }}
          APP_URL: ${{ inputs.app_ingress }}
          APP_DESCRIPTION: ${{ inputs.app_description }}
          APP_ICON: ${{ inputs.app_icon }}
          IS_ACTIVE: ${{ inputs.is_active }}
          IS_ENABLED: ${{ inputs.is_enabled }}
          TOKEN: ${{ steps.auth.outputs.token }}
        run: |
          echo "üì¶ Registering application:"
          echo "Name: $APP_NAME"
          echo "URL: $APP_URL"
          echo "Description: $APP_DESCRIPTION"

          # Verifica√ß√£o final do token antes do uso
          if [[ -z "$TOKEN" || "$TOKEN" == "***" ]]; then
            echo "‚ùå Token is empty or was masked!"
            exit 1
          fi

          # Default icon if empty
          if [[ -z "$APP_ICON" ]]; then
            APP_NAME_ENCODED=$(echo "$APP_NAME" | sed 's/ /%20/g')
            APP_ICON="https://placehold.co/600x400/white/gray?text=${APP_NAME_ENCODED}"
          fi

          # Criar payload JSON
          REGISTER_PAYLOAD=$(jq -n \
            --arg name "$APP_NAME" \
            --arg url "$APP_URL" \
            --arg description "$APP_DESCRIPTION" \
            --arg icon "$APP_ICON" \
            --argjson isActive $IS_ACTIVE \
            --argjson isEnabled $IS_ENABLED \
            '{name: $name, url: $url, description: $description, icon: $icon, isActive: $isActive, isEnabled: $isEnabled}')
          
          echo "Payload prepared successfully"

          # Registrar aplica√ß√£o
          REGISTER_RESPONSE=$(curl -s -X POST "https://k8s-be.lolmeida.com/deployed-apps" \
            -H "Authorization: Bearer $TOKEN" \
            -H 'Content-Type: application/json' \
            -d "$REGISTER_PAYLOAD" \
            --max-time 30 \
            -w "HTTP_STATUS:%{http_code}")

          # Processar resposta
          HTTP_STATUS=$(echo "$REGISTER_RESPONSE" | grep -o 'HTTP_STATUS:[0-9]*' | cut -d: -f2)
          RESPONSE_BODY=$(echo "$REGISTER_RESPONSE" | sed 's/HTTP_STATUS:[0-9]*$//')
          
          echo "Registration HTTP Status: $HTTP_STATUS"

          case "$HTTP_STATUS" in
            200|201)
              APP_ID=$(echo "$RESPONSE_BODY" | jq -r '.id // .app_id // "unknown"')
              echo "‚úÖ App registered successfully!"
              echo "App ID: $APP_ID"
              echo "status=success" >> $GITHUB_OUTPUT
              echo "app_id=$APP_ID" >> $GITHUB_OUTPUT
              ;;
            409)
              echo "‚ÑπÔ∏è App already exists"
              echo "status=already-exists" >> $GITHUB_OUTPUT
              echo "app_id=existing" >> $GITHUB_OUTPUT
              ;;
            401)
              echo "‚ùå Registration failed - Unauthorized (HTTP 401)"
              echo "This suggests the token is invalid, expired, or lacks permissions"
              echo "Response: $RESPONSE_BODY"
              echo "status=failed" >> $GITHUB_OUTPUT
              exit 1
              ;;
            *)
              echo "‚ùå Registration failed with HTTP $HTTP_STATUS"
              echo "Response: $RESPONSE_BODY"
              echo "status=failed" >> $GITHUB_OUTPUT
              exit 1
              ;;
          esac