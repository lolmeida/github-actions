name: Register Application

on:
  workflow_call:
    inputs:
      app_name:
        description: 'Application name'
        required: true
        type: string
      app_ingress:
        description: 'Application URL'
        required: true
        type: string
      app_description:
        description: 'Application description'
        required: true
        type: string
      app_icon:
        description: 'App icon URL (optional)'
        required: false
        type: string
        default: ''
      is_active:
        description: 'Is application active?'
        required: false
        type: boolean
        default: true
      is_enabled:
        description: 'Is application enabled?'
        required: false
        type: boolean
        default: true
    secrets:
      API_USERNAME:
        required: true
      API_PASSWORD:
        required: true

jobs:
  register-app:
    runs-on: ubuntu-latest
    steps:
      - name: Authenticate
        id: auth
        shell: bash
        env:
          AUTH_URL: https://auth.lolmeida.com/auth/login
          USERNAME: ${{ secrets.API_USERNAME }}
          PASSWORD: ${{ secrets.API_PASSWORD }}
        run: |
          echo "🔐 Authenticating against $AUTH_URL"

          AUTH_PAYLOAD=$(jq -n \
            --arg username "$USERNAME" \
            --arg password "$PASSWORD" \
            '{username: $username, password: $password}')

          TOKEN_RESPONSE=$(curl -s -X POST "$AUTH_URL" \
            -H 'Content-Type: application/json' \
            -d "$AUTH_PAYLOAD" \
            --max-time 30 \
            -w "HTTP_STATUS:%{http_code}")

          HTTP_STATUS=$(echo "$TOKEN_RESPONSE" | grep -o 'HTTP_STATUS:[0-9]*' | cut -d: -f2)
          RESPONSE_BODY=$(echo "$TOKEN_RESPONSE" | sed 's/HTTP_STATUS:[0-9]*$//')

          if [[ "$HTTP_STATUS" != "200" ]]; then
            echo "❌ Authentication failed (HTTP $HTTP_STATUS)"
            echo "Response: $RESPONSE_BODY"
            exit 1
          fi

          TOKEN=$(echo "$RESPONSE_BODY" | jq -r '.token')
          if [[ -z "$TOKEN" || "$TOKEN" == "null" ]]; then
            echo "❌ No token found in response"
            echo "Response: $RESPONSE_BODY"
            exit 1
          fi

          echo "✅ Authentication successful"
          # NÃO fazer echo do token - apenas confirmar que existe
          echo "Token received and stored"
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Validate Token
        shell: bash
        env:
          TOKEN: ${{ steps.auth.outputs.token }}
        run: |
          # Verificar se o token existe e não foi mascarado
          if [[ -z "$TOKEN" ]]; then
            echo "❌ Token is empty!"
            exit 1
          fi
          
          if [[ "$TOKEN" == "***" ]]; then
            echo "❌ Token was masked and corrupted!"
            exit 1
          fi
          
          echo "✅ Token validation passed"
          echo "Token length: ${#TOKEN}"

      - name: Test API Access
        shell: bash
        env:
          TOKEN: ${{ steps.auth.outputs.token }}
        run: |
          echo "🔍 Testing API endpoint access..."
          
          TEST_RESPONSE=$(curl -s -X GET "https://k8s-be.lolmeida.com/deployed-apps" \
            -H "Authorization: Bearer $TOKEN" \
            -w "HTTP_STATUS:%{http_code}" \
            --max-time 30)
          
          HTTP_STATUS=$(echo "$TEST_RESPONSE" | grep -o 'HTTP_STATUS:[0-9]*' | cut -d: -f2)
          RESPONSE_BODY=$(echo "$TEST_RESPONSE" | sed 's/HTTP_STATUS:[0-9]*$//')
          
          echo "Test endpoint HTTP Status: $HTTP_STATUS"
          
          if [[ "$HTTP_STATUS" == "401" ]]; then
            echo "❌ API access test failed - Unauthorized"
            echo "Token may be invalid or expired"
            exit 1
          elif [[ "$HTTP_STATUS" == "200" ]]; then
            echo "✅ API access test successful"
          else
            echo "⚠️ API access test returned HTTP $HTTP_STATUS (may be normal)"
          fi

      - name: Register Application
        id: register
        shell: bash
        env:
          APP_NAME: ${{ inputs.app_name }}
          APP_URL: ${{ inputs.app_ingress }}
          APP_DESCRIPTION: ${{ inputs.app_description }}
          APP_ICON: ${{ inputs.app_icon }}
          IS_ACTIVE: ${{ inputs.is_active }}
          IS_ENABLED: ${{ inputs.is_enabled }}
          TOKEN: ${{ steps.auth.outputs.token }}
        run: |
          echo "📦 Registering application:"
          echo "Name: $APP_NAME"
          echo "URL: $APP_URL"
          echo "Description: $APP_DESCRIPTION"

          # Verificação final do token antes do uso
          if [[ -z "$TOKEN" || "$TOKEN" == "***" ]]; then
            echo "❌ Token is empty or was masked!"
            exit 1
          fi

          # Default icon if empty
          if [[ -z "$APP_ICON" ]]; then
            APP_NAME_ENCODED=$(echo "$APP_NAME" | sed 's/ /%20/g')
            APP_ICON="https://placehold.co/600x400/white/gray?text=${APP_NAME_ENCODED}"
          fi

          # Criar payload JSON
          REGISTER_PAYLOAD=$(jq -n \
            --arg name "$APP_NAME" \
            --arg url "$APP_URL" \
            --arg description "$APP_DESCRIPTION" \
            --arg icon "$APP_ICON" \
            --argjson isActive $IS_ACTIVE \
            --argjson isEnabled $IS_ENABLED \
            '{name: $name, url: $url, description: $description, icon: $icon, isActive: $isActive, isEnabled: $isEnabled}')
          
          echo "Payload prepared successfully"

          # Registrar aplicação
          REGISTER_RESPONSE=$(curl -s -X POST "https://k8s-be.lolmeida.com/deployed-apps" \
            -H "Authorization: Bearer $TOKEN" \
            -H 'Content-Type: application/json' \
            -d "$REGISTER_PAYLOAD" \
            --max-time 30 \
            -w "HTTP_STATUS:%{http_code}")

          # Processar resposta
          HTTP_STATUS=$(echo "$REGISTER_RESPONSE" | grep -o 'HTTP_STATUS:[0-9]*' | cut -d: -f2)
          RESPONSE_BODY=$(echo "$REGISTER_RESPONSE" | sed 's/HTTP_STATUS:[0-9]*$//')
          
          echo "Registration HTTP Status: $HTTP_STATUS"

          case "$HTTP_STATUS" in
            200|201)
              APP_ID=$(echo "$RESPONSE_BODY" | jq -r '.id // .app_id // "unknown"')
              echo "✅ App registered successfully!"
              echo "App ID: $APP_ID"
              echo "status=success" >> $GITHUB_OUTPUT
              echo "app_id=$APP_ID" >> $GITHUB_OUTPUT
              ;;
            409)
              echo "ℹ️ App already exists"
              echo "status=already-exists" >> $GITHUB_OUTPUT
              echo "app_id=existing" >> $GITHUB_OUTPUT
              ;;
            401)
              echo "❌ Registration failed - Unauthorized (HTTP 401)"
              echo "This suggests the token is invalid, expired, or lacks permissions"
              echo "Response: $RESPONSE_BODY"
              echo "status=failed" >> $GITHUB_OUTPUT
              exit 1
              ;;
            *)
              echo "❌ Registration failed with HTTP $HTTP_STATUS"
              echo "Response: $RESPONSE_BODY"
              echo "status=failed" >> $GITHUB_OUTPUT
              exit 1
              ;;
          esac