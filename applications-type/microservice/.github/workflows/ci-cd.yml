name: Microservice CI/CD Pipeline

on:
  push:
    branches: [main, 'feature/*']
  pull_request:
    branches: [main]

env:
  SERVICE_NAME: user-management-service
  IS_MAIN_BRANCH: ${{ github.ref_name == 'main' }}
  IS_DEVELOP_BRANCH: ${{ github.ref_name == 'develop' }}

jobs:
  # Stage 1: Code Quality
  spotless-check:
    if: contains(fromJson('["java", "kotlin"]'), github.event.repository.language)
    uses: lolmeida/reusable-github-actions/.github/workflows/spotless-check.yml@main
    with:
      java_version: '21'
      auto_fix: ${{ github.event_name == 'pull_request' }}

  # Stage 2: Build & Test
  build:
    needs: spotless-check
    if: always() && !failure()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run tests
        run: |
          echo "Running tests for ${{ env.SERVICE_NAME }}"
          # Your test commands here

  # Stage 3: Docker Build (only on push to main/develop)
  docker-build:
    needs: build
    if: github.event_name == 'push' && (env.IS_MAIN_BRANCH == 'true' || env.IS_DEVELOP_BRANCH == 'true')
    uses: lolmeida/reusable-github-actions/.github/workflows/docker-jib-push.yml@main
    with:
      java_version: '21'
      image_name: ${{ env.SERVICE_NAME }}
      maven_profiles: ${{ env.IS_MAIN_BRANCH == 'true' && 'prod' || 'staging' }}
    secrets:
      DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
      DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}

  # Stage 4: Deploy to Staging (develop branch)
  deploy-staging:
    needs: docker-build
    if: env.IS_DEVELOP_BRANCH == 'true'
    uses: lolmeida/reusable-github-actions/.github/workflows/argocd-manage.yml@main
    with:
      action: sync-staging
      dry_run: false
    secrets:
      KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}

  # Stage 5: Deploy to Production (main branch)
  deploy-production:
    needs: docker-build
    if: env.IS_MAIN_BRANCH == 'true'
    uses: lolmeida/reusable-github-actions/.github/workflows/argocd-manage.yml@main
    with:
      action: sync-prod
      dry_run: false
    secrets:
      KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}